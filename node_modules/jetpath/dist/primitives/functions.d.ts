import { type HTTPBody, type JetFunc, type allowedMethods, type jetOptions, type methods } from "./types.js";
import { Context, type JetPlugin } from "./classes.js";
export declare function corsHook(options: {
    exposeHeaders?: string[];
    allowMethods?: allowedMethods;
    allowHeaders: string[];
    keepHeadersOnError?: boolean;
    maxAge?: string;
    credentials?: boolean;
    secureContext?: boolean;
    privateNetworkAccess?: any;
    origin: string[];
}): (ctx: Context) => void;
export declare const UTILS: {
    ctxPool: Context[];
    hooks: {};
    ae(cb: {
        (): any;
        (): any;
        (): void;
    }): boolean;
    set(): void;
    runtime: Record<string, boolean>;
    server(plugs: JetPlugin[]): {
        listen: any;
        edge: boolean;
    } | void;
};
export declare let _JetPath_paths: Record<methods, Record<string, JetFunc>>;
export declare const _JetPath_hooks: Record<string, (ctx: Context, err?: unknown) => void | Promise<void>>;
declare class JetPathErrors extends Error {
    constructor(message: string);
}
export declare const _DONE: JetPathErrors;
export declare const _OFF: JetPathErrors;
export declare function getHandlers(source: string, print: boolean, errorsCount?: {
    file: string;
    error: string;
}[] | undefined): Promise<{
    file: string;
    error: string;
}[] | undefined>;
export declare function validator(schema: HTTPBody<any> | undefined, data: any): Record<string, any>;
export declare const compileUI: (UI: string, options: jetOptions, api: string) => string;
export declare const compileAPI: (options: jetOptions) => [number, string];
export {};
