import { Stream } from "node:stream";
import type { JetPluginExecutor, JetPluginExecutorInitParams, methods } from "./types.js";
export declare class JetPlugin {
    name?: string;
    version?: string;
    JetPathServer?: any;
    hasServer?: boolean;
    executor: JetPluginExecutor;
    constructor({ executor }: {
        executor: JetPluginExecutor;
    });
    _setup(init: JetPluginExecutorInitParams): any;
}
export declare class Log {
    static colors: {
        reset: string;
        bright: string;
        dim: string;
        underscore: string;
        blink: string;
        reverse: string;
        hidden: string;
        fgBlack: string;
        fgRed: string;
        fgGreen: string;
        fgYellow: string;
        fgBlue: string;
        fgMagenta: string;
        fgCyan: string;
        fgWhite: string;
        bgBlack: string;
        bgRed: string;
        bgGreen: string;
        bgYellow: string;
        bgBlue: string;
        bgMagenta: string;
        bgCyan: string;
        bgWhite: string;
    };
    static print(message: any, color: string): void;
    static info(message: string): void;
    static warn(message: string): void;
    static error(message: string): void;
    static success(message: string): void;
}
export declare class Context {
    code: number;
    request: Request | undefined;
    params: Record<string, any> | undefined;
    search: Record<string, any> | undefined;
    body: Record<string, any> | undefined;
    path: string | undefined;
    app: Record<string, any>;
    _1?: string;
    _2?: Record<string, string>;
    _3?: Stream;
    _4: boolean;
    _5: any;
    _6: boolean;
    method: methods | undefined;
    _7(req: Request, path: string, params?: Record<string, any>, search?: Record<string, any>): void;
    send(data: unknown, contentType?: string): never;
    validate(data?: any): Record<string, any>;
    redirect(url: string): never;
    throw(code?: unknown, message?: unknown): never;
    get(field: string): string | undefined;
    set(field: string, value: string): void;
    eject(): never;
    sendStream(stream: Stream | string, ContentType: string): never;
    json<Type extends any = Record<string, any>>(): Promise<Type>;
}
